// This file is @generated by prost-build.
/// A Kitsune2 gossip protocol message.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct K2GossipMessage {
    #[prost(oneof = "k2_gossip_message::GossipMessage", tags = "1, 2")]
    pub gossip_message: ::core::option::Option<k2_gossip_message::GossipMessage>,
}
/// Nested message and enum types in `K2GossipMessage`.
pub mod k2_gossip_message {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum GossipMessage {
        /// A gossip initiation protocol message.
        #[prost(message, tag = "1")]
        Initiate(super::K2GossipInitiateMessage),
        /// A gossip acceptance protocol message.
        #[prost(message, tag = "2")]
        Accept(super::K2GossipAcceptMessage),
    }
}
/// A Kitsune2 gossip initiation protocol message.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct K2GossipInitiateMessage {
    /// The agent ids of the agents from the initiator who are participating in this gossip round.
    #[prost(bytes = "bytes", repeated, tag = "1")]
    pub participating_agents: ::prost::alloc::vec::Vec<::prost::bytes::Bytes>,
    /// Request ops that are new since the given timestamp.
    #[prost(int64, tag = "2")]
    pub new_since: i64,
}
/// A Kitsune2 gossip acceptance protocol message.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct K2GossipAcceptMessage {
    /// The agent ids of the from the acceptor who are participating in this gossip round.
    #[prost(bytes = "bytes", repeated, tag = "1")]
    pub participating_agents: ::prost::alloc::vec::Vec<::prost::bytes::Bytes>,
    /// Agent ids of agents that were mentioned in the initiator's participating_agents list
    /// that we do not have in our peer store.
    #[prost(bytes = "bytes", repeated, tag = "2")]
    pub missing_agents: ::prost::alloc::vec::Vec<::prost::bytes::Bytes>,
    /// Request ops that are new since the given timestamp.
    #[prost(int64, tag = "3")]
    pub new_since: i64,
    /// Ops that we have stored since the timestamp provided by the initiator in `new_since`.
    #[prost(bytes = "bytes", repeated, tag = "4")]
    pub new_ops: ::prost::alloc::vec::Vec<::prost::bytes::Bytes>,
    /// Provide a new bookmark for the initiator. Any new ops will have been returned in `new_ops`
    /// and the initiator should use this new timestamp in their `new_since` next time they gossip with us.
    #[prost(int64, tag = "5")]
    pub updated_new_since: i64,
}
