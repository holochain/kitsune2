syntax = "proto3";

package kitsune2.gossip;

// A Kitsune2 gossip protocol message.
message K2GossipMessage {
  enum GossipMessageType {
    UNSPECIFIED = 0;

    // A gossip initiation protocol message.
    INITIATE = 1;

    // A gossip acceptance protocol message.
    ACCEPT = 2;

    // A gossip no diff protocol message.
    NO_DIFF = 3;

    // A gossip agents protocol message.
    AGENTS = 4;
  }

  // The type of this message.
  GossipMessageType msg_type = 1;

  // The payload or content of this message.
  bytes data = 2;
}

// A message representation of a Kitsune2 DHT arc set.
message ArcSetMessage {
  // The encoded representation of covered DHT sectors.
  repeated uint32 value = 1;
}

// A Kitsune2 gossip initiation protocol message.
//
// Acceptable responses:
// - `K2GossipAcceptMessage`
message K2GossipInitiateMessage {
  bytes session_id = 1;

  // The agent ids of the agents from the initiator who are in the in the peer store for the space where gossip is running.
  repeated bytes participating_agents = 10;

  // The DHT sectors covered by the union of the agents in the participating_agents list.
  ArcSetMessage arc_set = 11;

  // Request ops that are new since the given timestamp.
  int64 new_since = 20;

  // The maximum number of bytes of new ops to respond with.
  uint32 max_new_bytes = 21;
}

// A Kitsune2 gossip acceptance protocol message.
//
// Acceptable responses:
// - `K2GossipNoDiffMessage`
message K2GossipAcceptMessage {
  bytes session_id = 1;

  // The agent ids of the agents from the acceptor who are in the in the peer store for the space where gossip is running.
  repeated bytes participating_agents = 10;

  // The DHT sectors covered by the union of the agents in the participating_agents list.
  ArcSetMessage arc_set = 11;

  // Agent ids of agents that were mentioned in the initiator's participating_agents list
  // that we do not have in our peer store.
  repeated bytes missing_agents = 12;

  // Request ops that are new since the given timestamp.
  int64 new_since = 20;

  // The maximum number of bytes of new ops to respond with.
  uint32 max_new_bytes = 21;

  // Ops that we have stored since the timestamp provided by the initiator in `new_since`.
  repeated bytes new_ops = 22;

  // Provide a new bookmark for the initiator. Any new ops will have been returned in `new_ops`
  // and the initiator should use this new timestamp in their `new_since` next time they gossip with us.
  int64 updated_new_since = 23;

  // TODO Send DHT snapshot diff.
}

// A Kitsune2 gossip no diff protocol message.
//
// Should be sent as a response to an `K2GossipAcceptMessage` to communicate that there was no diff
// or that a diff could not be computed.
//
// Acceptable responses:
// - `K2GossipAgentsMessage`
message K2GossipNoDiffMessage {
  bytes session_id = 1;

  // Agent ids of agents that were mentioned in the acceptor's participating_agents list
  // that we do not have in our peer store.
  repeated bytes missing_agents = 10;

  // The agent infos for the agents that were sent back in the missing_agents list in the acceptor's response.
  repeated bytes provided_agents = 11;

  // Ops that we have stored since the timestamp provided by the acceptors in `new_since`.
  repeated bytes new_ops = 20;

  // Provide a new bookmark for the initiator. Any new ops will have been returned in `new_ops`
  // and the acceptor should use this new timestamp in their `new_since` next time they gossip with us.
  int64 updated_new_since = 21;

  // Set when the initiator could not compare the acceptor's DHT diff with their own.
  bool cannot_compare = 30;
}

// A Kitsune2 gossip agents protocol message.
//
// This message is a final message when used in a gossip round.
message K2GossipAgentsMessage {
  bytes session_id = 1;

  // The agent infos for the agents that were sent back in the missing_agents list of the previous message.
  repeated bytes provided_agents = 10;
}

// TODO Further gossip protocol messages.
